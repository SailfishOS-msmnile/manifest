SailfishOS
===========

Getting started
---------------
## Setup Export Devices
~/.hadk.env
```
export ANDROID_ROOT="$HOME/hadk"
export VENDOR="xiaomi"
export DEVICE="sweet"
export PORT_ARCH="aarch64"
```
~/.mersdk.profile
```
function hadk() { source $HOME/.hadk.env; echo "Env setup for $DEVICE"; } hadk
```
~/.mersdkubu.profile
```
function hadk() { source $HOME/.hadk.env; echo "Env setup for $DEVICE"; }
export PS1="HABUILD_SDK [\${DEVICE}] $PS1"
hadk
```
## Packages Setup
```
sudo apt-get update
```
- For Ubuntu 20.04 | 64Bit | 16Gb Ram
```
sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libncurses5 libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-8-jdk python-is-python3 -yq
```
- Repo setup
```
curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > repo
```
```
sudo mv repo /usr/bin/
```
```
sudo chmod a+x /usr/bin/repo
```
## Setup SFOS SDK
```
export PLATFORM_SDK_ROOT=/srv/sailfishos
```
```
curl -k -O https://releases.sailfishos.org/sdk/installers/latest/Jolla-latest-SailfishOS_Platform_SDK_Chroot-i486.tar.bz2
```
```
sudo mkdir -p $PLATFORM_SDK_ROOT/sdks/sfossdk
```
```
sudo tar --numeric-owner -p -xjf Jolla-latest-SailfishOS_Platform_SDK_Chroot-i486.tar.bz2 -C $PLATFORM_SDK_ROOT/sdks/sfossdk
```
```
echo "export PLATFORM_SDK_ROOT=$PLATFORM_SDK_ROOT" >> ~/.bashrc
```
```
echo 'alias sfossdk=$PLATFORM_SDK_ROOT/sdks/sfossdk/sdk-chroot' >> ~/.bashrc; exec bash
```
```
echo 'PS1="PlatformSDK $PS1"' > ~/.mersdk.profile
```
```
echo '[ -d /etc/bash_completion.d ] && for i in /etc/bash_completion.d/*;do . $i;done' >> ~/.mersdk.profile
```
```
sfossdk
```
## Setup Ubuntu SDK
```
TARBALL=ubuntu-focal-20210531-android-rootfs.tar.bz2
```
```
curl -O https://releases.sailfishos.org/ubu/$TARBALL
```
```
UBUNTU_CHROOT=$PLATFORM_SDK_ROOT/sdks/ubuntu
```
```
sudo mkdir -p $UBUNTU_CHROOT
```
```
sudo tar --numeric-owner -xjf $TARBALL -C $UBUNTU_CHROOT
```
```
sudo chroot $UBUNTU_CHROOT /bin/bash -c "chage -M 999999 $(id -nu 1000)"
```
```
ubu-chroot -r $PLATFORM_SDK_ROOT/sdks/ubuntu
```
## Sync
```
repo init -u https://github.com/dopaemon/manifest.git -b hybris-18.1
```
```
repo sync --fetch-submodules -j$(nproc --all)
```
## Patches hybris
```
./hybris-patches/apply-patches.sh --mb
```
